 <?php
 
 /** 
 * Implements hook_menu() 
 */ 
 
 function subscription_checkout_menu() { 
 
 $items['add-to-cart/%/%commerce_product_sku/%'] = array( 
 'type' => MENU_CALLBACK, 
 'page callback' => 'add_product', 
 'page arguments' => array(1, 2, 3), 
 'access callback' => TRUE, 
 ); 
 
 return $items; 
 } 
 
 function add_product( $line_item_type, $product, $quantity = 1) { 
 global $user; 
 $uid =$user->uid; 
 
 // Get the order to add line items to 
 $order = commerce_cart_order_load( $uid); 
 if (!$order) { 
 $order = commerce_cart_order_new( $uid); 
 } 
 
 // Add the product to the line item and create it 
 $line_item = commerce_product_line_item_new( $product, $quantity, $order->order_id, array(), $line_item_type); 
 
 // Add the line item to the cart. 
 if(commerce_cart_product_add($uid, $line_item)) { 
 drupal_goto('checkout/' . $order->order_id); 
 } 
 } 
 
 /** 
 * Argument loader for a commerce sku 
 */ 
 function commerce_product_sku_load($sku) { 
 return commerce_product_load_by_sku($sku); 
 } 
 
 
 /** 
 * Implements hook_form_alter(). 
 */ 
 function subscription_checkout_form_alter( &$form, &$form_state, &$form_id) { 
 if ($form_id = 'commerce_checkout_form_checkout') { 
 global $user; 
 $uid = $user->uid; 
 
 //change the title of checkbox for storing the card on file. 
 $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store']['#title'] = t('Store this credit card for future use (checking this will enable recurring payments on the same card).'); 
 
 //checking to see if the user is anonymous, if yes, removing the billing information from display 
 if (user_is_anonymous()) { 
 // $form['customer_pro	file_billing']['#attributes']['style'] = array('0' => 'display : none;'); 
 $form['customer_profile_shipping']['#attributes']['style'] = array('0' => 'display : none;'); 
 unset($form['buttons']['cancel']); 
 
 if ($form_id='commerce_checkout_form_checkout') { 
 if (isset($form['buttons'])){ 
 array_unshift($form['buttons']['continue']['#validate'],'unique_mail_validate'); 
 } 
 } 
 } 
 } 
 
 if ($form_id = 'views-form-commerce-cart-form-default') { 
 
 // if the user is anonymous disable the quantity field and remove the update button. 
 if (user_is_anonymous()) { 
 if (isset($form['edit_quantity'])) { 
 $form['actions']['submit']['#access'] = FALSE; 
 foreach($form['edit_quantity'] as &$quantity) { 
 if (is_array($quantity)) { 
 $quantity['#disabled'] = TRUE; 
 } 
 } 
 } 
 } 
 } 
 } 
 
 // function to see if the email exists in the DB, if yes set an error on the form. 
 function unique_mail_validate() { 
 if (isset($form_state['values']['account']['login']['mail'])){ 
 $mail=$form_state['values']['account']['login']['mail']; 
 $user=user_load_by_mail($mail); 
 // echo ""; print_r($user);exit();

     if (!empty($user->uid)) {
       form_set_error('account][login][mail',t("The email address is already in use please login or try another email address"));
     }
   }
 }
 

/**

 // Changing the title of protein, from SKU to UPC
 function subscription_checkout_field_extra_fields_alter(&$info) {
   if (isset($info['commerce_product'])) {
     $info['commerce_product']['proteins']['form']['sku']['label'] = t('UPC');
     $info['commerce_product']['proteins']['display']['sku']['label'] = t('UPC');
   }
 }

**/
 